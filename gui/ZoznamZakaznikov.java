/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import OSPABA.ISimDelegate;
import OSPABA.SimState;
import OSPABA.Simulation;
import java.util.Vector;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import simulation.MySimulation;
import simulation.Zakaznik;

/**
 *
 * @author Jožko
 */
public class ZoznamZakaznikov extends javax.swing.JFrame implements ISimDelegate {

    /**
     * Creates new form ZoznamZakaznikov
     */
    public ZoznamZakaznikov() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        zoznamZak = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        parkovacieMiesta = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        zoznamZak.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Spôsob", "Úsek", "Rýchlosť", "Vzdialenosť", "Okolo park. miesta", "Spokojnosť"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(zoznamZak);

        jButton1.setText("Štart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        parkovacieMiesta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "15", "14", "13", "12", "11", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(parkovacieMiesta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton1))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MySimulation salon = new MySimulation(2, 6, 5, 2);
        salon.registerDelegate(this);
        salon.setSimSpeed(0.5, 2);
        salon.simulateAsync(1);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZoznamZakaznikov.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZoznamZakaznikov.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZoznamZakaznikov.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZoznamZakaznikov.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ZoznamZakaznikov().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable parkovacieMiesta;
    private javax.swing.JTable zoznamZak;
    // End of variables declaration//GEN-END:variables

    @Override
    public void simStateChanged(Simulation smltn, SimState ss) {
    }

    @Override
    public void refresh(Simulation smltn) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
        DefaultTableModel dm = (DefaultTableModel)zoznamZak.getModel();
        while(dm.getRowCount() > 0) {
            dm.removeRow(0);
        }
        
        Vector<Zakaznik> jj = (Vector<Zakaznik>)((MySimulation)smltn).agentOkolia().dajZoznamZakaznikov().clone();
        for (Zakaznik akt : jj) {
            if (akt.dajCiJeVtutri()) {
                Object[] row = {akt.dajID(), "-", "Je v salone", "-", "-", "-", akt.dajSpokojnost()};
                dm.addRow(row);
            } else {
                if (akt.dajUsek() == 3 || akt.dajUsek() == 5 || akt.dajUsek() == 7) {
                    Object[] row = {akt.dajID(), akt.dajSposobPohybu(), akt.dajUsek(), String.format("%.2f", akt.dajRychlostNaUseku()) + " m/s", String.format("%.2f", akt.dajPresneMiestoNaUseku(smltn.currentTime())) + " m", akt.dajPriKtoromParkovacomMiesteJe(), akt.dajSpokojnost()};
                    dm.addRow(row);
                } else {
                    Object[] row = {akt.dajID(), akt.dajSposobPohybu(), akt.dajUsek(), String.format("%.2f", akt.dajRychlostNaUseku()) + " m/s", String.format("%.2f", akt.dajPresneMiestoNaUseku(smltn.currentTime())) + " m", "-", akt.dajSpokojnost()};
                    dm.addRow(row);
                }
            }
        }
        
        DefaultTableModel dm1 = (DefaultTableModel)parkovacieMiesta.getModel();
        
        int[][] parkovisko = (int[][])((MySimulation)smltn).agentParkovania().dajParkovacieMiesta().clone();
        for (int i = 0; i < ((MySimulation)smltn).agentParkovania().dajPocetParkovacichRadov(); i++) {
            for (int j = 0; j < 15; j++) {
                dm1.setValueAt(parkovisko[i][j], i, 14-j);
            }
        }
        }
        });
        
    }
}
